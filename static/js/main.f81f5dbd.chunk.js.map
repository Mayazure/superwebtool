{"version":3,"sources":["components/JSONTreeBuilder.js","views/JSONView.js","App.js","serviceWorker.js","index.js"],"names":["tree","key","value","treeNode","Array","isArray","node","title","uuidv4","icon","color","children","forEach","child","index","push","toString","Object","keys","JSONTreeView","props","jsonStr","useState","jsonTreeData","setJsonTreeData","parseError","setParseError","useEffect","console","log","parsedJson","JSON","parse","err","showIcon","treeData","setJsonStr","Form","useForm","form","style","margin","onClick","disabled","type","getFieldValue","onVisualize","span","Item","name","TextArea","height","resize","placeholder","App","className","JSONView","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mVAuDA,IAAMA,EAAO,SAACC,EAAKC,GAGf,MADa,CADAC,EAASF,EAAKC,KAKzBC,EAAW,SAAXA,EAAYF,EAAKC,GACnB,GAAGE,MAAMC,QAAQH,GAAO,CACpB,IAAMI,EAAO,CACTC,MAAMN,EACNA,IAAIO,cACJC,KAAM,0BAAMC,MAAM,WAAZ,MACNC,SAAS,IAKb,OAHAT,EAAMU,SAAQ,SAACC,EAAOC,GAClBR,EAAKK,SAASI,KAAKZ,EAASW,EAAME,WAAWH,OAE1CP,EACL,GAAoB,kBAAVJ,EAAmB,CAC/B,IAAMI,EAAO,CACTC,MAAMN,EACNA,IAAIO,cACJC,KAAM,0BAAMC,MAAM,WAAW,MAC7BC,SAAS,IAKb,OAHAM,OAAOC,KAAKhB,GAAOU,SAAQ,SAACX,GACxBK,EAAKK,SAASI,KAAKZ,EAASF,EAAIC,EAAMD,QAEnCK,EAEP,IAAIC,EACJ,cAAeL,GACX,IAAK,SACDK,EAAK,UAAMN,EAAN,eAAgBC,EAAhB,KACL,MACJ,QACIK,EAAK,UAAMN,EAAN,cAAeC,GAG5B,MAAO,CACHK,QACAN,IAAIO,gBAKDW,EAjGf,SAAsBC,GAAO,IAElBC,EAAWD,EAAXC,QAFiB,EAIgBC,mBAAS,MAJzB,mBAIjBC,EAJiB,KAIHC,EAJG,OAKYF,mBAAS,MALrB,mBAKjBG,EALiB,KAKLC,EALK,KAwBxB,OAjBAC,qBAAU,WAKN,GAJAH,EAAgB,MAChBE,EAAc,MACdE,QAAQC,IAAI,aACZD,QAAQC,IAAIR,GACRA,EACA,IACIO,QAAQC,IAAI,SACZ,IAAMC,EAAaC,KAAKC,MAAMX,GACxBE,EAAevB,EAAK,OAAQ8B,GAClCN,EAAgBD,GAClB,MAAOU,GACLP,EAAcO,EAAIjB,eAG3B,CAACK,IAEDE,EAEK,kBAAC,IAAD,CACIW,UAAQ,EACRC,SAAUZ,IAKnBE,EAEK,oCACKA,GAMT,sCCzCO,WAAUL,GAAO,IAAD,EAEGE,mBAAS,MAFZ,mBAEpBD,EAFoB,KAEXe,EAFW,OAGZC,IAAKC,UAAbC,EAHoB,oBAc3B,OACI,oCACI,kBAAC,IAAD,KACI,yBAAKC,MAAO,CAACC,OAAO,QAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQC,QAAS,aAAgBC,UAAQ,GAAzC,UACA,kBAAC,IAAD,CAAQC,KAAK,UAAUF,QAAS,kBAfhC,WAChB,IAAMxC,EAAQqC,EAAKM,cAAc,aACjCT,EAAWlC,GAayC4C,KAApC,gBAIZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,KAAM,IACP,kBAAC,IAAD,CACIR,KAAMA,GAEN,kBAAC,IAAKS,KAAN,CACIC,KAAK,aAEL,kBAACC,EAAA,EAAD,CAAUV,MAAO,CAACW,OAAO,QAASC,OAAO,QAASC,YAAa,iCAK3E,kBAAC,IAAD,CAAKN,KAAM,IACP,kBAAC,EAAD,CAAc1B,QAASA,QC7B5BiC,MARf,WACE,OACI,yBAAKC,UAAU,OACb,kBAACC,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.f81f5dbd.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {Tree} from 'antd';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction JSONTreeView(props){\r\n\r\n    const {jsonStr} = props;\r\n\r\n    const [jsonTreeData, setJsonTreeData] = useState(null);\r\n    const [parseError, setParseError] = useState(null);\r\n\r\n    useEffect(()=> {\r\n        setJsonTreeData(null)\r\n        setParseError(null)\r\n        console.log('useEffect')\r\n        console.log(jsonStr)\r\n        if (jsonStr) {\r\n            try {\r\n                console.log('parse')\r\n                const parsedJson = JSON.parse(jsonStr);\r\n                const jsonTreeData = tree('json', parsedJson);\r\n                setJsonTreeData(jsonTreeData);\r\n            } catch (err) {\r\n                setParseError(err.toString())\r\n            }\r\n        }\r\n    }, [jsonStr])\r\n\r\n    if(jsonTreeData){\r\n        return(\r\n            <Tree\r\n                showIcon\r\n                treeData={jsonTreeData}\r\n            />\r\n        )\r\n    }\r\n\r\n    if(parseError){\r\n        return(\r\n            <>\r\n                {parseError}\r\n            </>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <>\r\n\r\n        </>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nconst tree = (key, value)=>{\r\n    const node = treeNode(key, value)\r\n    const data = [node]\r\n    return data\r\n}\r\n\r\nconst treeNode = (key, value)=>{\r\n    if(Array.isArray(value)){\r\n        const node = {\r\n            title:key,\r\n            key:uuidv4(),\r\n            icon: <span color=\"#87d068\">[]</span>,\r\n            children:[]\r\n        }\r\n        value.forEach((child, index)=>{\r\n            node.children.push(treeNode(index.toString(),child))\r\n        })\r\n        return node;\r\n    }else if(typeof value === 'object'){\r\n        const node = {\r\n            title:key,\r\n            key:uuidv4(),\r\n            icon: <span color=\"#108ee9\">{\"{}\"}</span>,\r\n            children:[]\r\n        }\r\n        Object.keys(value).forEach((key)=>{\r\n            node.children.push(treeNode(key,value[key]))\r\n        })\r\n        return node;\r\n    }else{\r\n        let title;\r\n        switch (typeof value){\r\n            case 'string':\r\n                title = `${key} : \"${value}\"`\r\n                break\r\n            default:\r\n                title = `${key} : ${value}`\r\n        }\r\n\r\n        return({\r\n            title,\r\n            key:uuidv4(),\r\n        })\r\n    }\r\n}\r\n\r\nexport default JSONTreeView;","import React, {useState} from \"react\";\r\nimport {Form, Button, Row, Col, Space} from 'antd'\r\nimport TextArea from \"antd/es/input/TextArea\";\r\nimport JSONTreeView from \"../components/JSONTreeBuilder\";\r\n\r\nexport default function (props){\r\n\r\n    const [jsonStr, setJsonStr] = useState(null)\r\n    const [form] = Form.useForm();\r\n\r\n    const onVisualize = ()=>{\r\n        const value = form.getFieldValue('jsonInput')\r\n        setJsonStr(value)\r\n    }\r\n\r\n    const onFormat = ()=>{\r\n\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Row>\r\n                <div style={{margin:'4px'}}>\r\n                    <Space>\r\n                        <Button onClick={()=>onFormat()} disabled>format</Button>\r\n                        <Button type=\"primary\" onClick={()=>onVisualize()}>visualize</Button>\r\n                    </Space>\r\n                </div>\r\n            </Row>\r\n            <Row>\r\n                <Col span={10}>\r\n                    <Form\r\n                        form={form}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"jsonInput\"\r\n                        >\r\n                            <TextArea style={{height:'100vh', resize:'none'}} placeholder={\"Input your json data here\"}/>\r\n                        </Form.Item>\r\n                    </Form>\r\n\r\n                </Col>\r\n                <Col span={14}>\r\n                    <JSONTreeView jsonStr={jsonStr}/>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport JSONView from \"./views/JSONView\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n        <JSONView/>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}